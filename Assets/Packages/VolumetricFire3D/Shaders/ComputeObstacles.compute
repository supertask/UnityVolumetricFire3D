#pragma kernel ResetObstacle
#pragma kernel UpdatObstacle

#define NUM_THREADS 8

#include "Assets/Packages/VolumetricFire3D/CustomPackages/Voxelizer/Shaders/Voxel.hlsl"

float _Radius;
float4 _ObjectPosition, _Size; //bounds size
//int _Width, _Height, _Depth; //num of voxels

bool _WallRight, _WallLeft, _WallUp, _WallDown, _WallFront, _WallBack;

StructuredBuffer<Voxel> _VoxelBuffer;
//StructuredBuffer<float> _Voxels;
RWStructuredBuffer<float> _Write;

/* int get_voxel_index(int x, int y, int z) {
    return z * (_Width * _Height) + y * _Width + x;
}*/

[numthreads(NUM_THREADS,NUM_THREADS,NUM_THREADS)]
void ResetObstacle (int3 id : SV_DispatchThreadID)
{
    int idx = id.x + id.y*_Size.x + id.z*_Size.x*_Size.y;
    float obstacle = 0;
    _Write[idx] = obstacle;
}

[numthreads(NUM_THREADS,NUM_THREADS,NUM_THREADS)]
void UpdatObstacle (int3 id : SV_DispatchThreadID)
{

    int idx = id.x + id.y*_Size.x + id.z*_Size.x*_Size.y;
    
    float obstacle = 0;
    
    if(_WallLeft && id.x-1 < 0) obstacle = 1;
    if(_WallRight && id.x+1 > (int)_Size.x-1) obstacle = 1;
    
    if(_WallDown && id.y-1 < 0) obstacle = 1;
    if(_WallUp && id.y+1 > (int)_Size.y-1) obstacle = 1;
    
    if(_WallBack && id.z-1 < 0) obstacle = 1;
    if(_WallFront && id.z+1 > (int)_Size.z-1) obstacle = 1;

    if (_VoxelBuffer[idx].fill > 0.1) obstacle = 1;

    //
    // Test
    //
    /*
    float3 pos = id/(_Size.xyz-1.0f) - _ObjectPosition.xyz;
	float mag = pos.x*pos.x + pos.y*pos.y + pos.z*pos.z;
	float rad2 = _Radius*_Radius;
	float gaussDistribution = exp(-mag/rad2);
    if (gaussDistribution > 0.5) obstacle = 1;
    */

    
    _Write[idx] = obstacle;
}



















