//#pragma kernel Init
#pragma kernel CSMain
#define NUM_THREADS 8

float4 _Size; //sphere size
int _Width, _Height, _Depth; //num of voxels

StructuredBuffer<float> _Voxels;
RWStructuredBuffer<float> _Write;

/*
int get_voxel_index(int x, int y, int z) {
    return z * (_Width * _Height) + y * _Width + x;
}

[numthreads(NUM_THREADS,NUM_THREADS,NUM_THREADS)]
void Init (int3 id : SV_DispatchThreadID)
{
    int idx = id.x + id.y*_Size.x + id.z*_Size.x*_Size.y;
    float obstacle = 0;
    _Write[idx] = obstacle;
}
*/

[numthreads(NUM_THREADS,NUM_THREADS,NUM_THREADS)]
void CSMain (int3 id : SV_DispatchThreadID)
{

    int idx = id.x + id.y*_Size.x + id.z*_Size.x*_Size.y;
    
    float obstacle = 0;
    
    if(id.x-1 < 0) obstacle = 1;
    if(id.x+1 > (int)_Size.x-1) obstacle = 1;
    
    if(id.y-1 < 0) obstacle = 1;
    if(id.y+1 > (int)_Size.y-1) obstacle = 1;
    
    if(id.z-1 < 0) obstacle = 1;
    if(id.z+1 > (int)_Size.z-1) obstacle = 1;
    
    _Write[idx] = obstacle;
}




















